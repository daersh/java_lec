package com.ohgiraffers.section01;

public class Application {
    /* 수업목표.
                             ** 목표 **
        ----------------------------------------------------
            * 상속에 대해 이해할 수 있다.
        ----------------------------------------------------*/
    /* 필기.
                                           ** 상속 **
        ----------------------------------------------------------------------------------
            * 정의
                * 부모의 멤버를 물려받아 재사용성에 유리하게 만들기 위한 객체지향의 특징이자 문법이다.
                * 하지만 단순히 재사용하는 개념보다 부모 클래스의 개념을 확장 하는데 의의가 있다.
                * 현재 가장 중요한 의미는 '다형성을 적용하기 위한 문법적 토대'가 된다는 사실이다.
            * 장점
                * 1. 새로운 클래스 작성 시 기존 작성한 클래스를 재사용 가능하다.
                    * 1-1. 재사용 시 생산성을 크게 향상시킬 수 있다.(생산성 측면)
                    * 1-2. 부모 클래스만 수정해도 자식 클래스 전체에 적용된다.(유지보수 측면)
                * 2. 클래스 간의 계층 관계가 형성되며 다형성의 문법적인 토대가 된다.
            * 단점
                 * 1. 부모 클래스의 기능을 추가/변경 시 자식 클래스가 정상적으로 작동 될지 예측 힘들다.
                    * 1-1. 경우에 따라 유지보수에 악영향을 미칠 수 있다.
                 * 2. 부모 클래스에서는 의미 있고 중요했던 기능이 자식 클래스에서 무의미할 수 있다.
                    * 2-1. 불필요한 멤버가 추가되기 떄문이다.
            * 장단점을 고려했을 때, 상속은 오용의 가능성이 있다.
            * IS-A 관계로 구분되는 경우에만 잘 고려하여 적용해야 한다.
        *
                                   ** IS-A 관계 VS HAS-A 관계 **
        ----------------------------------------------------------------------------------
            * IS-A (상속 관계)
                * 경찰차 IS A 차
                * JAVA IS A PROGRAMMING-LANGUAGE
            * HAS-A (연관 관계 - 강결합 관계)
                * 학생 HAS A 스마트폰 class student{ Smartphone smartphone = new smartphone()}
        *
                                     ** method overriding **
        ----------------------------------------------------------------------------------
            * 정의
                * 메소드를 재정의 하는 것으로 부모 메소드의 헤드부를 그대로 사용하면서 자식 클래스가 재정의한다.
                * 자식이 정의한 메소드대로 동작하도록 메소드 바디를 새로 다시 작성한다.
        ----------------------------------------------------------------------------------*/
    public static void main(String[] args) {
        Car car = new Car();
        car.soundHorn();
        car.run();
        car.soundHorn();
        if (car.isRunning()) System.out.println("달리는 중");
        else System.out.println("정차중");
        car.stop();

        FireCar fireCar = new FireCar();
        fireCar.run();
        fireCar.soundHorn();
        fireCar.stop();
        fireCar.sprayWater();

        RacingCar racingCar = new RacingCar();
        racingCar.run();
        racingCar.soundHorn();

    }
}
